<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>Mango Api: Source: SerialChart.js</title>

    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>

<body>

<div id="main">

    <h1 class="page-title">Source: SerialChart.js</h1>

    



    
    <section>
        <article>
            <pre class="prettyprint source linenums"><code>/**
 * Serial Chart to display Data in a chart.
 * 
 * @copyright 2015 {@link http://infiniteautomation.com|Infinite Automation Systems, Inc.} All rights reserved.
 * @author Jared Wiltshire
 * @module {SerialChart} mango/serialChart
 */
define(['jquery', 'moment-timezone'], function($, moment) {

/**
 * @constructs SerialChart
 * @param {Object} options - options for chart
 * @alias module:mango/serialChart
 */
function SerialChart(options) {
    this.divId = null;
    this.amChart = null;
    this.uniqueAxes = false;
    this.axisLeftRight = true;
    this.axisOffset = 0;
    
    $.extend(this, options);
    
    if (!baseConfiguration.categoryAxis.labelFunction)
        baseConfiguration.categoryAxis.labelFunction = this.labelFunction;
    
    this.amChart = $.extend(true, {}, getBaseConfiguration(), this.amChart);
}

/**
 * Create the label for the categoryAxis
 * 
 * @param {string} valueText
 * @param {date} date 
 * @param {Axis} categoryAxis
 * @param {string} periodFormat
 */
SerialChart.prototype.labelFunction = function(valueText, date, categoryAxis, periodFormat) {
    var formatString;
    switch (periodFormat) {
    case 'fff':
    case 'ss':
        formatString = 'LTS';
        break;
    case 'mm':
    case 'hh':
        formatString = 'LT';
        break;
    case 'DD':
    case 'WW':
        formatString = 'MMM DD';
        break;
    case 'MM':
        formatString = 'MMM';
        break;
    case 'YYYY':
        formatString = 'YYYY';
        break;
    }
    
    return moment(date).format(formatString);
};

/**
 * Method called when a balloon is shown on the chart
 */
SerialChart.prototype.balloonFunction = function(graphDataItem, amGraph) {
    if (!graphDataItem.values)
        return '';
    
    var dateFormatted = moment(graphDataItem.category).format('lll Z z');
    var label = amGraph.title + '&lt;br>' +
        dateFormatted + "&lt;br>&lt;strong>" +
        graphDataItem.values.value.toFixed(2);
    
    if (amGraph.unit) {
        label += ' ' + amGraph.unit;
    }
    
    label += "&lt;/strong>";
    
    return label;
};

/**
 * Displaying Loading... on top of chart div
 */
SerialChart.prototype.loading = function() {
    if ($('#' + this.divId + ' .amcharts-main-div').find('div.loading').length > 0)
        return;
    var loadingDiv = $('&lt;div>');
    loadingDiv.addClass('loading');
    loadingDiv.text('Loading Chart...');
    $('#' + this.divId + ' .amcharts-main-div').prepend(loadingDiv);
};

/**
 * Remove the loading display
 */
SerialChart.prototype.removeLoading = function() {
    $('#' + this.divId + ' .amcharts-main-div').find('div.loading').remove();
};

/**
 * Do the heavy lifting and create the item
 * @return AmChart created
 */
SerialChart.prototype.createDisplay = function() {
    var self = this;
    var deferred = $.Deferred();
    
    require(['amcharts.serial'], function() {
        self.amChart = AmCharts.makeChart(self.divId, self.amChart);
        deferred.resolve(self);
    });
    
    return deferred.promise();
};


/**
 * Data Provider listener to clear data
 */
SerialChart.prototype.onClear = function() {
    this.removeLoading();
    
    while (this.amChart.dataProvider.length > 0) {
        this.amChart.dataProvider.pop();
    }
    
    while (this.amChart.graphs.length > 0) {
        var graph = this.amChart.graphs[0];
        this.amChart.removeGraph(graph);
    }
    
    // leave first auto axis
    while (this.amChart.valueAxes.length > 1) {
        var axis = this.amChart.valueAxes[1];
        this.amChart.removeValueAxis(axis);
    }
    
    // start creating axes at default positions
    this.axisLeftRight = true;
    this.axisOffset = 0;
    
    this.amChart.validateData();
};

/**
 * Data Provider Listener
 * On Data Provider load we add new data
 */
SerialChart.prototype.onLoad = function(data, dataPoint) {
    this.removeLoading();
    
    var valueField = this.valueFieldForPoint(dataPoint);
    var fromField = this.fromFieldForPoint(dataPoint);
    
    var graphId = this.graphId(valueField, dataPoint);
    var graph = this.findGraph(graphId) || this.createGraph(valueField, dataPoint);
    
    var dataProvider = this.amChart.dataProvider;
    for (i = 0; i &lt; data.length; i++) {
        var dataItem = data[i];
        var date = this.dataItemToDate(dataItem, dataPoint);
        
        // look for existing item with same date, makes cursor behave nicely
        var existing = null;
        for (var j = 0; j &lt; dataProvider.length; j++) {
            if (dataProvider[j].date.valueOf() === date.valueOf()) {
                existing = dataProvider[j];
                break;
            }
        }
        
        var value = dataItem[fromField];
        if (typeof this.manipulateValue === 'function')
            value = this.manipulateValue(value, dataPoint);
        
        // if it exists then update the item, otherwise insert new item
        if (existing) {
            existing[valueField] = value;
        }
        else {
            var entry = {};
            entry[valueField] = value;
            entry.date = date;
            dataProvider.push(entry);
        }
    }
    
    // sort the data as items could have been pushed to end of array
    // not needed if categoryAxis.parseDates === true
    dataProvider.sort(this.sortCompare);
};

/**
 * Loading data failed
 */
SerialChart.prototype.loadPointFailed = function(errorObject) {
    this.removeLoading();
};

/**
 * Redraw the chart without reloading data
 */
SerialChart.prototype.redraw = function() {
    this.amChart.validateData();
};

/**
 * Find a graph with the provided ID
 * @param {string} graphId
 */
SerialChart.prototype.findGraph = function(graphId) {
    for (var i = 0; i &lt; this.amChart.graphs.length; i++) {
        var graph = this.amChart.graphs[i];
        if (graph.id === graphId) {
            return graph;
        }
    }
};

/**
 * Create a Graph
 */
SerialChart.prototype.createGraph = function(valueField, dataPoint) {
    var graph = new AmCharts.AmGraph();
    graph.valueField = valueField;
    graph.type = this.graphType(valueField, dataPoint);
    graph.title = this.graphTitle(valueField, dataPoint);
    graph.id = this.graphId(valueField, dataPoint);
    graph.balloonFunction = this.balloonFunction;
    
    if (this.uniqueAxes) {
        var axisId = this.axisId(valueField, dataPoint);
        
        // find existing axis, it it doesn't exist create one
        graph.valueAxis = this.findAxis(axisId) || this.createAxis(graph, valueField, dataPoint);
    }
    
    this.amChart.addGraph(graph);
    return graph;
};

/**
 * Return the graph type
 * @returns {string} - defaults to 'smoothedLine'
 */
SerialChart.prototype.graphType = function(valueField, dataPoint) {
    return 'smoothedLine';
};

/**
 * Return the title for the chart
 * @param valueField
 * @param {Object} dataPoint
 * @return {string} - defaults to dataPoint.name
 */
SerialChart.prototype.graphTitle = function(valueField, dataPoint) {
    return dataPoint.name;
};

/**
 * Return the graphID
 * @param valueField
 * @param {Object} dataPoint
 * @return {string} - defaults to dataPoint.xid
 */
SerialChart.prototype.graphId = function(valueField, dataPoint) {
    return dataPoint.xid;
};

/**
 * Find the axis with the provided id
 * @param {string} axisId
 */
SerialChart.prototype.findAxis = function(axisId) {
    for (var i = 0; i &lt; this.amChart.valueAxes.length; i++) {
        var axis = this.amChart.valueAxes[i];
        if (axis.id === axisId) {
            return axis;
        }
    }
};

/**
 * Create an axis
 */
SerialChart.prototype.createAxis = function(graph, valueField, dataPoint) {
    var axis = new AmCharts.ValueAxis();
    axis.id = this.axisId(valueField, dataPoint);
    axis.title = this.axisTitle(valueField, dataPoint);
    
    axis.position = this.axisLeftRight ? "left" : "right";
    axis.offset = this.axisOffset;
    
    // only display grid for first axis
    if (this.amChart.valueAxes.length > 1)
        axis.gridAlpha = 0;
    
    if (!this.axisLeftRight)
        this.axisOffset += 50;
    this.axisLeftRight = !this.axisLeftRight;
    
    this.amChart.addValueAxis(axis);
    return axis;
};

SerialChart.prototype.axisTitle = function(valueField, dataPoint) {
    return dataPoint.name;
};

SerialChart.prototype.axisId = function(valueField, dataPoint) {
    return dataPoint.xid;
};

SerialChart.prototype.valueFieldForPoint = function(dataPoint) {
    return dataPoint.xid;
};

SerialChart.prototype.fromFieldForPoint = function(dataPoint) {
    return 'value';
};

SerialChart.prototype.dataItemToDate = function(dataItem, dataPoint) {
    return new Date(dataItem.timestamp);
};

SerialChart.prototype.sortCompare = function(a, b) {
    return a.date - b.date;
};

var baseConfiguration = {
        type: "serial",
        addClassNames: true,
        dataProvider: [],
        //Note the path to images
        pathToImages: "/resources/amcharts/images/",
        categoryField: "date",
        categoryAxis: {
            parseDates: true,
            minPeriod: "mm",
            labelRotation: 45,
            boldPeriodBeginning: false,
            markPeriodChange: false,
            equalSpacing: true
        },
        chartScrollbar: {},
        trendLines: [],
        chartCursor: {},
        graphs: [],
        guides: [],
        valueAxes: [],
        allLabels: [],
        balloon: {},
        legend: {
            useGraphSettings: true,
            /**
             * Method to render the Legend Values better
             */
            valueFunction: function(graphDataItem) {
                if(graphDataItem.values &amp;&amp; graphDataItem.values.value)
                    return graphDataItem.values.value.toFixed(2);

                return ""; //Otherwise nada
            }
        },
        titles: []
};

/**
 * Return the base Serial Chart Configuration
 */
function getBaseConfiguration() {
    return baseConfiguration;
}

return SerialChart;

}); // define
</code></pre>
        </article>
    </section>




</div>

<nav>
    <h2><a href="index.shtm">Home</a></h2><h3>Modules</h3><ul><li><a href="module-mango_AccumulatorDataProvider.shtm">mango/AccumulatorDataProvider</a></li><li><a href="module-mango_AccumulatorRollupDataProvider.shtm">mango/AccumulatorRollupDataProvider</a></li><li><a href="module-mango_api.shtm">mango/api</a></li><li><a href="module-mango_autologin.shtm">mango/autologin</a></li><li><a href="module-mango_BaseDisplay.shtm">mango/BaseDisplay</a></li><li><a href="module-mango_CssDisplay.shtm">mango/CssDisplay</a></li><li><a href="module-mango_DataProvider.shtm">mango/DataProvider</a></li><li><a href="module-mango_exportConfig.shtm">mango/exportConfig</a></li><li><a href="module-mango_GridDisplay.shtm">mango/GridDisplay</a></li><li><a href="module-mango_HistoricalDataProvider.shtm">mango/HistoricalDataProvider</a></li><li><a href="module-mango_HTMLDisplay.shtm">mango/HTMLDisplay</a></li><li><a href="module-mango_ListDisplay.shtm">mango/ListDisplay</a></li><li><a href="module-mango_PointValueDataProvider.shtm">mango/PointValueDataProvider</a></li><li><a href="module-mango_PointValueQueryInput.shtm">mango/PointValueQueryInput</a></li><li><a href="module-mango_providerOptionsManager.shtm">mango/providerOptionsManager</a></li><li><a href="module-mango_RealtimeDataProvider.shtm">mango/RealtimeDataProvider</a></li><li><a href="module-mango_serialChart.shtm">mango/serialChart</a></li><li><a href="module-mango_statisticsBarChart.shtm">mango/statisticsBarChart</a></li><li><a href="module-mango_StatisticsDataProvider.shtm">mango/StatisticsDataProvider</a></li><li><a href="module-mango_StatisticsTableDisplay.shtm">mango/StatisticsTableDisplay</a></li><li><a href="module-mango_TextDisplay.shtm">mango/TextDisplay</a></li><li><a href="module-mango_TimePresetPicker.shtm">mango/TimePresetPicker</a></li></ul><h3>Classes</h3><ul><li><a href="AccumulatorDataProvider.shtm">AccumulatorDataProvider</a></li><li><a href="AccumulatorRollupDataProvider.shtm">AccumulatorRollupDataProvider</a></li><li><a href="BaseDisplay.shtm">BaseDisplay</a></li><li><a href="CssDisplay.shtm">CssDisplay</a></li><li><a href="DataProvider.shtm">DataProvider</a></li><li><a href="GridDisplay.shtm">GridDisplay</a></li><li><a href="HistoricalDataProvider.shtm">HistoricalDataProvider</a></li><li><a href="HTMLDisplay.shtm">HTMLDisplay</a></li><li><a href="ListDisplay.shtm">ListDisplay</a></li><li><a href="MangoAPI.shtm">MangoAPI</a></li><li><a href="module-mango_serialChart.shtm">mango/serialChart</a></li><li><a href="PointValueDataProvider.shtm">PointValueDataProvider</a></li><li><a href="ProviderOptionsManager.shtm">ProviderOptionsManager</a></li><li><a href="RealtimeDataProvider.shtm">RealtimeDataProvider</a></li><li><a href="StatisticsDataProvider.shtm">StatisticsDataProvider</a></li><li><a href="StatisticsTableDisplay.shtm">StatisticsTableDisplay</a></li><li><a href="TextDisplay.shtm">TextDisplay</a></li></ul><h3>Tutorials</h3><ul><li><a href="tutorial-currentValue.shtm">Current Value</a></li><li><a href="tutorial-dataPointChart.shtm">Data Point Charting</a></li><li><a href="tutorial-dataPointQuery.shtm">Query Data Points</a></li><li><a href="tutorial-events.shtm">Events Query</a></li><li><a href="tutorial-eventWebSocket.shtm">Live Events</a></li><li><a href="tutorial-gridDisplay_.shtm">Grid Display</a></li><li><a href="tutorial-listDisplay_.shtm">List Display</a></li><li><a href="tutorial-pointValueWebSocket.shtm">Live Data</a></li><li><a href="tutorial-setPointValue.shtm">Setting a Value</a></li><li><a href="tutorial-statisticsTableDisplay_.shtm">Statistics Table Display</a></li><li><a href="tutorial-textDisplay_.shtm">Text Display</a></li></ul>
</nav>

<br class="clear">

<footer>
     <a href="http://infiniteautomation.com" target="ia">&copy; Infinite Automation Systems, Inc.</a>
</footer>

<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>

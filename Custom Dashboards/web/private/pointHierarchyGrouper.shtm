<!DOCTYPE html>
<html>
    <head>
        <title>Templated Dashboard</title>
        
        
        <!-- Page Style -->
        <style type="text/css">
        </style>
        <link href="/modules/dashboards/web/js/bootstrap/css/bootstrap.min.css" rel="stylesheet">
        <link href="/modules/dashboards/web/js/jquery-ui/jquery.datetimepicker.css" rel="stylesheet">
        
        
        <!-- JQuery and Plugins -->
        <script type="text/javascript" src="/modules/dashboards/web/js/jquery/jquery-1.11.1.js"></script>
        <script type="text/javascript" src="/modules/dashboards/web/js/jquery-ui/jquery-ui.js"></script> <!-- Can use min.js -->
        <script type="text/javascript" src="/modules/dashboards/web/js/jquery-ui/jquery.datetimepicker.js"></script>
        <!-- Charting Library -->
        <script type="text/javascript" src="/modules/dashboards/web/js/amcharts/amcharts.js"></script>
        <script type="text/javascript" src="/modules/dashboards/web/js/amcharts/serial.js"></script>
        <script type="text/javascript" src="/modules/dashboards/web/js/amcharts/pie.js"></script>
        <script type="text/javascript" src="/modules/dashboards/web/js/amcharts/gauge.js"></script>
        
        <!-- Bootstrap -->
        <script src="/modules/dashboards/web/js/bootstrap/js/bootstrap.min.js"></script>
        
        
        <!-- Mango Rest API Helper -->
        <script type="text/javascript" src="/modules/dashboards/web/js/mangoApi.js"></script>         
        
        <!-- Mango AM Charts Helper -->
        <script type="text/javascript" src="/modules/dashboards/web/js/mangoAmChartsApi.js"></script>
        
        <!-- Mango Templating API -->
        <script type="text/javascript" src="/modules/dashboards/web/js/mango/dataDisplayManager.js"></script>
        <script type="text/javascript" src="/modules/dashboards/web/js/mango/serialChart.js"></script>
        <script type="text/javascript" src="/modules/dashboards/web/js/mango/pieChart.js"></script>
        <script type="text/javascript" src="/modules/dashboards/web/js/mango/statistics.js"></script>
        <script type="text/javascript" src="/modules/dashboards/web/js/mango/pointValueDataProvider.js"></script>
        <script type="text/javascript" src="/modules/dashboards/web/js/mango/statisticsDataProvider.js"></script>
        <script type="text/javascript" src="/modules/dashboards/web/js/mango/dataPointMatcher.js"></script>
        <script type="text/javascript" src="/modules/dashboards/web/js/mango/dataPointGroup.js"></script>        
        <script type="text/javascript" src="/modules/dashboards/web/js/mango/pointHierarchyGrouper.js"></script>
        
        
        <!-- JS For this page -->
        <script type="text/javascript">
        $( document ).ready(function(){
            
            //&&&&&&&&&& Display Manager Setup &&&&&&&&&&&&&&
            //Create the Display Manager
            var displayManager = new DataDisplayManager();
            
            //Add Display Configurations to it
            displayManager.addDisplayConfiguration(new SerialChartConfiguration(
                    'chart1', //Chart DIV id
                    [1,2], //List of data provider Ids for this chart
                    { //AmChart Mixins
                titles: [{
                    id: "Title-1",
                    size: 15,
                    text: "Voltage And Temperature"
                }],
                categoryField: "timestamp",
                graphs: [{
                    title: "Voltage",
                    valueAxis: "voltage-axis",
                    //Function to render the text inside the balloons
                    //TODO Make this bulletproof and create a way to get a default 'graph'
                    balloonFunction: function(graphDataItem, amGraph){
                        if(typeof graphDataItem.values != 'undefined'){
                            return graphDataItem.category + "<br>" + graphDataItem.values.value.toFixed(2);
                        }else{
                            return "";
                        }
                    },
                    bullet: "square",
                    bulletSize: 6,
                    lineColor: "green",
                    lineThickness: 1,
                    negativeLineColor: "red",
                    type: "smoothedLine",
                    valueField: "volts"
                },{
                    title: "Temperature",
                    //Function to render the text inside the balloons
                    //TODO Make this bulletproof and create a way to get a default 'graph'
                    balloonFunction: function(graphDataItem, amGraph){
                        if(typeof graphDataItem.values != 'undefined'){
                            return graphDataItem.category + "<br>" + graphDataItem.values.value.toFixed(2);
                        }else{
                            return "";
                        }
                    },
                    valueAxis: "temp-axis",
                    bullet: "round",
                    bulletSize: 6,
                    lineColor: "orange",
                    lineThickness: 1,
                    negativeLineColor: "red",
                    type: "smoothedLine",
                    valueField: "temp"
                }],
                valueAxes: [{
                    id: "voltage-axis",
                    title: "Voltage",
                    position: "left"
                },{
                    id: "temp-axis",
                    title: "Temperature",
                    position: "right"
                }],
            }), true);
            
            //Add a Pie Chart Configuration
            displayManager.addDisplayConfiguration(new PieChartConfiguration(
                    'chart2', //Chart Div ID
                    [1,2], //Data Provider IDs for this chart
                    { //AmChart Mixins
                      titles: [{
                          text: "Averages",
                          size: 16
                      }],
                      depth3D: 15,
                      balloonText: "[[title]]<br><span style='font-size:14px'><b>[[value]]</b> ([[percents]]%)</span>",
                      angle: 30
                     },{  //MangoPieChart Mixins
                         onLoad: function(data, xid){
                             var total = 0;
                             for(var i=0; i<data.length; i++){
                                 total += data[i][this.valueAttribute];
                             }
                             total = total / i;
                             total = total.toFixed(2);
                             //Find the matching XID if there is one
                             for(var i=0; i<this.amChart.dataProvider.length; i++){
                                 if(this.amChart.dataProvider[i].xid == xid){
                                     this.amChart.dataProvider[i].total = total;
                                     this.amChart.validateData();
                                     return; //Done
                                 }
                             }
                             //We didn't find our set, so add a brand new one
                             this.amChart.dataProvider.push({total: total, xid: xid});
                             this.amChart.validateData();
                         }
                     }), true); //Add and Create on add
           
           
            //Setup a statistics Display
            displayManager.addDisplayConfiguration(new StatisticsConfiguration('temperature', [3]), true); //Add and Create on add         
            
            //&&&&&&&&&&  Data Point Matcher Setup &&&&&&&&&&&&&&
            
            //Create the Point Configurations
            var pointConfigurations = new Array();
            pointConfigurations.push(new DataPointMatchConfiguration(1, {xidStartsWith: 'volts'}));
            pointConfigurations.push(new DataPointMatchConfiguration(2, {xidStartsWith: 'temp'}));
            pointConfigurations.push(new DataPointMatchConfiguration(3, {xidStartsWith: 'temp', providerType: 'Statistics'}))
            /**
             * Function called on data point Match
             */
            function onMatch(dataPointConfiguration){
                console.log("onMatch found xid: " + dataPointConfiguration.point.xid);
                //Now add it as a provider for the manager
                displayManager.addDataPointConfiguration(dataPointConfiguration);
            }
            //Create the Point Matcher
            var pointMatcher = new DataPointMatcher(pointConfigurations, onMatch);
            
            
             //&&&&&&&&&&  Data Point Grouper Setup &&&&&&&&&&&&&&
            //Setup the Grouper
            var root; //Root of P.H.
            var grouper; //Grouper
            /**
             * What to do when we find a group
             */
            function onGroup(dataPointGroup){
                console.log('Group: ' + dataPointGroup.label + ' (' + dataPointGroup.dataPoints.length + ')');
                pointMatcher.match(dataPointGroup.dataPoints);
            }
             
             
            //Fetch the Point Hierarchy to work with         
            var deferred = mangoRest.hierarchy.getRoot(function(phRoot){

                root = phRoot; //Set the Global
                
            },showError); //end get data points
            
            $.when(deferred).then(function(){
                //Setup the Grouper when ready
                grouper = new PointHierarchyGrouper(root, new Array(), onGroup);
                
                //Add group Configurations
                //grouper.addGroupConfiguration(new DataPointGroupConfiguration()); //Simple Group into All
                grouper.addGroupConfiguration(new DataPointGroupConfiguration({
                    groupBy: 'Folder',
                    labelAttribute: 'name',
                    matchConfigurations: [{
                        matchAttribute: 'name',
                        endsWith: 'Goal Folder'
                    }],
                    
                })); //Group uniqely by folder name
                
                
                grouper.group(); //Action to group
                
                //Then Start loading data
                //Action the matcher to setup the display manager,
                // here we tell the display manager what Data Providers to update and
                // give it the date/rollups for them

                var to = new Date();
                var from = new Date(to.getTime() - 1000*60*60);
                displayManager.refresh([1,2,3], from, to, 'AVERAGE', 'MINUTES', 1);
                
                //Set an interval that will refresh our page periodically
                setInterval(function(){
                    var to = new Date();
                    var from = new Date(to.getTime() - 1000*60*60);
                    displayManager.refresh([1,2,3], from, to, 'AVERAGE', 'MINUTES', 1);
                }, 10000);
            });


            
            /**
             * Helper Function to show error messages
             */
            function showError(jqXHR, textStatus, errorThrown, mangoMessage){
                
                var msg = "";
                if(textStatus != null)
                    msg += (textStatus + " ");
                if(errorThrown != null)
                    msg += (errorThrown + " ");
                if(mangoMessage != null)
                    msg += (mangoMessage + " ");
                msg += "\n";
                $("#errors").text(msg);
            }
        });
        </script>
        
        
    </head>
    <body>
    <p>This page will create a dashboard from a template that matches points from Folders in the Point Hierarchy.  
    </p>
    
    <!-- Placeholder to log errors -->
    <div id="errors" style="color: red"></div> 
    
    <hr></hr>
    <!-- The Temperature Chart -->
    <div id="chart1" style='width:44%; height:400px; vertical-align: top;  display: inline-block; padding: 10px;'></div>
    <div id="chart2" style='width:44%; height:400px; vertical-align: top;  display: inline-block; padding: 10px;'></div>
    
    <div id="temperatureStatistics">
       <p><b>Statistics for the Period</b></p>
        <!-- For Numeric Points -->
        <div style="clear:both">
          <div style="float:left; padding-right:5px">Average: </div>
          <div id="temperatureAverage" style="float:left"></div>
        </div>
        <div style="clear:both">
          <div style="float:left; padding-right:5px">Integral: </div>
          <div id="temperatureIntegral" style="float:left"></div>
        </div>
        <div style="clear:both">
          <div style="float:left; padding-right:5px">Sum: </div>
          <div id="temperatureSum" style="float:left"></div>
        </div>        
        <div style="clear:both">
          <div style="float:left; padding-right:5px">First: </div>
          <div id="temperatureFirst" style="float:left"></div>
        </div>
        <div style="clear:both">
          <div style="float:left; padding-right:5px">Last: </div>
          <div id="temperatureLast" style="float:left"></div>
        </div>
        <div style="clear:both">
          <div style="float:left; padding-right:5px">Count: </div>
          <div id="temperatureCount" style="float:left"></div>
        </div>
        <div style="clear:both">
          <div style="float:left; padding-right:5px">Maximum: </div>
          <div id="temperatureMaximum" style="float:left"></div>
        </div>
        <div style="clear:both">
          <div style="float:left; padding-right:5px">Minimum: </div>
          <div id="temperatureMinimum" style="float:left"></div>
        </div>
    </div>
    </body>
</html>
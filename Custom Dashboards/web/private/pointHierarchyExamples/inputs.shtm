<!DOCTYPE html>

<html>
<head>
	<meta charset="utf-8">
	<!-- Add the Mango Favicon -->
    <link rel="icon" href="/2.5.0/images/favicon.ico">
    
	<!-- Page Style -->
    <style type="text/css">
    </style>
	
	
	<title>Inputs</title>
    
    <!-- JQuery -->
    <script type="text/javascript" src="/modules/dashboards/web/js/jquery/jquery-1.11.2.js"></script>    	

    <script type="text/javascript" src="/modules/dashboards/web/js/moment-with-locales.min.js"></script>
    <script type="text/javascript" src="/modules/dashboards/web/js/moment-timezone-with-data.min.js"></script>
    <link href="/modules/dashboards/web/js/jquery-ui/jquery.datetimepicker.css" rel="stylesheet">
    <script type="text/javascript" src="/modules/dashboards/web/js/jquery-ui/jquery.datetimepicker.js"></script>
    
    <!-- Charting Library -->
    <script type="text/javascript" src="/modules/dashboards/web/js/amcharts/amcharts.js"></script>
    <script type="text/javascript" src="/modules/dashboards/web/js/amcharts/serial.js"></script>
    <script type="text/javascript" src="/modules/dashboards/web/js/amcharts/gauge.js"></script>

    <!-- Mango Rest API Helper -->
    <script type="text/javascript" src="/mango-javascript/v1/mangoApi.js"></script>         
        
    <!-- Mango Templating API -->
    <!-- Display Widgets -->
    <script type="text/javascript" src="/mango-javascript/v1/serialChart.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/barChart.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/statisticsBarChart.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/pieChart.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/statistics.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/gaugeChart.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/simpleDisplay.js"></script>
    
    
    <!-- Data Providers -->
    <script type="text/javascript" src="/modules/dashboards/web/js/extend.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/dataProvider.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/pointValueDataProvider.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/realtimePointValueDataProvider.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/statisticsDataProvider.js"></script>
    <!-- Input Widgets -->
    <script type="text/javascript" src="/mango-javascript/v1/dateTimePicker.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/rollupPicker.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/timePeriodTypePicker.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/input.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/select.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/listView.js"></script>
    <!-- Templater Core -->
    <script type="text/javascript" src="/mango-javascript/v1/dataDisplayManager.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/dataPointMatcher.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/dataPointGroup.js"></script>  
    <script type="text/javascript" src="/mango-javascript/v1/pointHierarchyGrouper.js"></script>
    <script type="text/javascript" src="/mango-javascript/v1/dashboardTemplater.js"></script>
    
   <script type="text/javascript">
   
   //Define Global Variables
   var templater1, templater2;
   
   $( document ).ready(function(){
       
       //Setup Display Configurations
       
       var simpleDisplay1 = new SimpleDisplayConfiguration([1], 
               {
                  onClear: function(){
                      $('#display1-count').empty();
                  },
                  onLoad: function(pointValues, dataPoint){
                      $('#display1-count').text(pointValues.length);
                   }
               }); //Just assign data provider ids
       var simpleDisplay2 = new SimpleDisplayConfiguration([1], 
               {
                  onClear: function(){
                      $('#display2-count').empty();
                  },
                  onLoad: function(pointValues, dataPoint){
                      $('#display2-count').text(pointValues.length);
                   }
               }); //Just assign data provider ids
             
       //Setup Point Configurations
       var pointConfigurations = new Array();
       pointConfigurations.push(new DataPointMatchConfiguration(1, [{matchAttribute: 'xid', regex: 'voltage'}]))

       //Setup Groups
       var group = new DataPointGroupConfiguration({
           groupBy: 'Folder',
           labelAttribute: 'name',
           matchConfigurations: [{
               matchAttribute: 'path',
               regex: /Target Folder/
           }]
           });
       
       var groupConfigurations = new Array();
       groupConfigurations.push(group);
       
       //Setup Templater, Defaults to previous 12 Hours
       
       
       templater1 = new DashboardTemplater({
           debug: true,
           type: 'PointHierarchy',
           displayConfigurations: [simpleDisplay1],
           pointConfigurations: pointConfigurations,
           groupConfigurations: groupConfigurations,
           dataProviders: new Array(), //Ensure we have separate providers from templater 2
      });

      var templater2EndDate = new Date();
      var templater2StartDate = new Date(templater2EndDate.getTime() - 1000*60*60); //1 Hour 
      //Configure Templater 2
      templater2 = new DashboardTemplater({
           debug: true,
           type: 'PointHierarchy',
           displayConfigurations: [simpleDisplay2],
           pointConfigurations: pointConfigurations,
           groupConfigurations: groupConfigurations,
           dataProviders: new Array(), //Ensure we have separate providers from templater 1
           
           startDate: templater2StartDate,
           endDate: templater2EndDate,
           
           //Here we reference the functions below to handle the changes and perform custom actions on them
           startDateConfiguration:  new DateTimePickerConfiguration('startDate2', {}),
           endDateConfiguration: new DateTimePickerConfiguration('endDate2', {}),
           rollupConfiguration: new RollupConfiguration('rollup2', {}, {selected: 0}),
           timePeriodTypeConfiguration: new TimePeriodTypeConfiguration('timePeriodType2', {timePeriodTypes: ['SECONDS', 'MINUTES', 'HOURS', 'DAYS', 'WEEKS', 'MONTHS', 'YEARS']}, {selected: 1}),
           timePeriodConfiguration: new InputConfiguration('timePeriod2', {}, {defaultValue: 1}),
           
           startDateChanged: startDateChanged,
           endDateChanged: endDateChanged,
           rollupChanged: rollupChanged,
           timePeriodTypeChanged: timePeriodTypeChanged,
           timePeriodChanged: timePeriodChanged,
           
           //Because we are not going to use a Group Selector we need to let the templater to know 
           // not to create the default one.  This is done by passing in a dummy Group Selector that does nothing
           groupSelectConfiguration: {create: function(){}, addItem: function(label, id){}}, //Dummy Configuration that does nothing
      });
      
      //Using the Deferred to know when the templater is ready for use, we change to the first group
      templater2.deferred.done(function() {
          templater2.groupChanged(0); //Signal a group change
      });
   });// End When page Ready
   
   var groupId = 0; //Groups are referenced to thier position in the array in the templater, there is only 1 group and its at position 0
   
   /**
    * What to do when Templater 2's start date is changed
    */
   function startDateChanged(date, $input){
       this.startDate = date;
       this.displayManager.refresh(null, 
           {
            from: this.startDate, 
            to: this.endDate, 
            rollup: this.rollup, 
            timePeriodType: this.timePeriodType, 
            timePeriods: this.timePeriods
           });

   }
   function endDateChanged(date, $input){
       this.endDate = date;
       this.displayManager.refresh(null, 
          {
           from: this.startDate, 
           to: this.endDate, 
           rollup: this.rollup, 
           timePeriodType: this.timePeriodType, 
           timePeriods: this.timePeriods
          });
   }
   
   function rollupChanged(rollup){
       this.rollup = rollup;
       this.displayManager.refresh(null,
          {
           from: this.startDate, 
           to: this.endDate, 
           rollup: this.rollup, 
           timePeriodType: this.timePeriodType, 
           timePeriods: this.timePeriods
          });
       }
   
   function timePeriodTypeChanged(timePeriodType){
       this.timePeriodType = timePeriodType;
       this.displayManager.refresh(null, 
          {
           from: this.startDate, 
           to: this.endDate, 
           rollup: this.rollup, 
           timePeriodType: this.timePeriodType, 
           timePeriods: this.timePeriods
          });
   }
   
   function timePeriodChanged(timePeriods){
       this.timePeriods = timePeriods;
       this.displayManager.refresh(null, 
          {
           from: this.startDate, 
           to: this.endDate, 
           rollup: this.rollup, 
           timePeriodType: this.timePeriodType, 
           timePeriods: this.timePeriods
          });
   }

   </script>





</head>
<body>
    <div id="errors"></div> <!-- The templater defaults to using a div with id errors if it exists -->
    
    <p>This page uses 2 Templaters to show the possible ways to configure inputs to the templater. The templater 
    has 6 Inputs.</p>
    <ul>
        <li>Group Select - The list of Matched Groups</li>
        <li>Start Date - Start date for all rendering. Defaults to 12 Hours ago</li>
        <li>End Date - End date for all rendering. Defaults to now.</li>
        <li>Rollup - The type of rollup used. Defaults to AVERAGE.</li>
        <li>Time Period Type - the time period type to apply to the Rollup. Default to HOURS.</li>
        <li>Time Periods - the number of period types to apply to Rollup</li>
    </ul>
    
    <p>By default the Group Select is the only way to action a refresh of displays.  This can be overriden as seen in example 2.</p>
    <h2>Templater 1 Inputs</h2>
    <select id="groups">
        <option>Select Group</option>
    </select>
    <label for="startDate">Start Date</label>
    <input id="startDate"></input>
    
    <label for="endDate">End Date</label>
    <input id="endDate"></input>
    
    <label for="rollup">Rollup:</label>
    <select id="rollup" ></select>
    
    <label for="timePeriodType">Time Period:</label>
    <select id="timePeriodType" ></select>
    
    <label for="timePeriod">Periods:</label>
    <input id="timePeriod" type="number" value="1"/>
    
    <div id="display1">
        <p>Here is a count of the samples from Templater 1</p>
        <div id="display1-count"></div>
    </div>
    <hr>
    <h2>Templater 2 Inputs</h2>
    <p>This templater can be actioned by changing any of the inputs.</p>
    <label for="startDate2">Start Date</label>
    <input id="startDate2"></input>
    
    <label for="endDate2">End Date</label>
    <input id="endDate2"></input>
    
    <label for="rollup2">Rollup:</label>
    <select id="rollup2" ></select>
    
    <label for="timePeriodType2">Time Period:</label>
    <select id="timePeriodType2" ></select>
    
    <label for="timePeriod2">Periods:</label>
    <input id="timePeriod2" type="number" value="1"/>
    
    
    <div id="display2">
        <p>Here is a count of the samples from Templater 2</p>
        <div id="display2-count"></div>
    </div>
    
</body>
</html>


<!DOCTYPE html>

<html>
<head>
	<meta charset="utf-8">
	<!-- Add the Mango Favicon -->
    <link rel="icon" href="/2.5.0/images/favicon.ico">
        
	<!-- Page Style -->
    <style type="text/css">
    </style>
	
	<title>Bar Chart</title>

    <script type="text/javascript" src="/resources/loaderConfig.js"></script>
    <script type="text/javascript" src="/resources/require.js"></script>
    
    <!-- Map mango-1.1 overtop of mango link in loader configuration -->
    <script>
    	require.config({
    		map: {'*': {'mango': 'mango-1.1'}}
		});
    </script>
    
    <script type="text/javascript">
    require(['mango/serialChart', 'mango/dataPointMatcher', 'mango/dataPointGroup', 'mango/listView',
             'mango/dashboardTemplater', 'domReady!'],
    function(SerialChart, DataPointMatcher, DataPointGroup, ListViewConfiguration, DashboardTemplater) {
    
    // get subtypes we need
    var DataPointMatchConfiguration = DataPointMatcher.DataPointMatchConfiguration;
    var DataPointMatchConfiguration = DataPointMatcher.DataPointMatchConfiguration;
    var DataPointGroupConfiguration = DataPointGroup.DataPointGroupConfiguration;
        
   //Define Global Variables
   var templater;
   
		//Setup Display Configurations
		var displayConfigurations = new Array();
        var bar1 = new SerialChart({
        	divId: 'chart1', //Chart DIV id
        	dataProviderIds: [1], //List of data provider Ids for this chart
        	amChart: { chartScrollbar: null},
        	graphId: function(valueField, dataPoint){
           		return 'bar1';
           	},
        	graphType: function(valueField, dataPoint){
        		return 'column';
			}
        });
        displayConfigurations.push(bar1);
       
		var bar2 = new SerialChart({
			divId: 'chart2', //Chart DIV id
			dataProvidersIds: [1], //List of data provider Ids for this chart
            amChart: { chartScrollbar: null},
        	graphId: function(valueField, dataPoint){
           		return 'bar1';
           	},
        	graphType: function(valueField, dataPoint){
        		return 'column';
			},   
           /**
            * on load of data
            * @param data - list of point value time
            * @param dataPoint - data point for the values
            */
           onLoad: function(data, dataPoint){
               this.removeLoading();
               
             //Create some statistis as an example
             var total = 0;
             var max = data[0].value;
             var min = data[0].value;
             for(var i=0; i<data.length; i++){
                 total = total + data[i].value;
                 if(max < data[i].value)
                     max = data[i].value;
                 if(min > data[i].value)
                     min = data[i].value;
             }
             
             //Create one entry per Data Point
             var entry = {
                     name: dataPoint.name,
                     total: total,
                     maximum: max,
                     minimum: min
             };
             
             this.amChart.dataProvider.push(entry);
             
             //Refresh the data       
             this.amChart.validateData();
         }		
       });
       displayConfigurations.push(bar2);
       
       
       
       //Create Data Providers
       var dataProviders = new Array();
 
       //Setup Point Configurations
       var pointConfigurations = new Array();
       pointConfigurations.push(new DataPointMatchConfiguration(1, [{matchAttribute: 'xid', regex: /voltage/}], {providerType: 'PointValue'}))
       pointConfigurations.push(new DataPointMatchConfiguration(1, [{matchAttribute: 'xid', regex: /temperature/}], {providerType: 'PointValue'}))

       //Setup Groups
       var group = new DataPointGroupConfiguration({
           groupBy: 'Folder',
           labelAttribute: 'name',
           matchConfigurations: [{
               matchAttribute: 'path',
               regex: /Target Folder/
           }]
           });
       
       var groupConfigurations = new Array();
       groupConfigurations.push(group);
       
       //Create a custom group list view
       var groupListView = new ListViewConfiguration('groupsList', {}, {styleClass: "ui-btn"});
       
       //Setup Templater, Defaults to previous 12 Hours
       var templaterConfig = {
               debug: true,
               type: 'PointHierarchy',
               displayConfigurations: displayConfigurations,
               pointConfigurations: pointConfigurations,
               groupConfigurations: groupConfigurations,
               dataProviders: dataProviders,
               groupSelectConfiguration: groupListView,
       }
       
       templater = new DashboardTemplater(templaterConfig);    

    }); // require
    </script>





</head>
<body>
    <div id="errors"></div> <!-- The templater defaults to using a div with id errors if it exists -->
    <ul id="groupsList"></ul>
    <p>Bar Chart using a PointValueDataProvider mapped to the voltage and temperature points.  The first chart shows the default behavior 
        of computing the average of the point values.  The second chart shows how to manipulate the data and create a more complex chart.
        Click the Target Folder to start.
    </p>
    <div  id="chart1" style="width:100%; height:400px; vertical-align: top;  display: inline-block; padding: 10px;"></div>
    <div  id="chart2" style="width:100%; height:400px; vertical-align: top;  display: inline-block; padding: 10px;"></div>
</body>
</html>

